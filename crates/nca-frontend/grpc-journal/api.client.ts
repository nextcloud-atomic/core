// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "api.proto" (package "api", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { JournalLogStream } from "./api";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { LogMessage } from "./api";
import type { LogFilter } from "./api";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service api.JournalLogStream
 */
export interface IJournalLogStreamClient {
    /**
     * @generated from protobuf rpc: Tail(api.LogFilter) returns (stream api.LogMessage);
     */
    tail(input: LogFilter, options?: RpcOptions): ServerStreamingCall<LogFilter, LogMessage>;
}
/**
 * @generated from protobuf service api.JournalLogStream
 */
export class JournalLogStreamClient implements IJournalLogStreamClient, ServiceInfo {
    typeName = JournalLogStream.typeName;
    methods = JournalLogStream.methods;
    options = JournalLogStream.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: Tail(api.LogFilter) returns (stream api.LogMessage);
     */
    tail(input: LogFilter, options?: RpcOptions): ServerStreamingCall<LogFilter, LogMessage> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<LogFilter, LogMessage>("serverStreaming", this._transport, method, opt, input);
    }
}
